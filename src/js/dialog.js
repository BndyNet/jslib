// Generated by IcedCoffeeScript 108.0.11

/*!
 * dialog v1.0.0
 * http://www.bndy.net
 * 
 * Copyright (c) 2016 Bndy.Net, released under the MIT license
 * 
 * Requires: jQuery, layer
 */

(function() {
  (function(window) {
    var Dialog;
    if (typeof jQuery === 'undefined') {
      throw new Error('Dialog component requires jQuery');
    }
    if (typeof layer === 'undefined') {
      throw new Error('Dialog component requires layer');
    }
    Dialog = function() {
      this.VERSION = "1.0.0";
      this.options = {
        useAlertify: false,
        logPosition: "bottom right",
        closeLogOnClick: false
      };
      return this.init();
    };
    Dialog.prototype = {
      init: function() {
        if (!$) {
          console.error("jQuery Required");
        }
        if (this.options.useAlertify && typeof alertify === "undefined") {
          console.error("alertify Required");
        }
        if (typeof alertify !== "undefined") {
          alertify.logPosition(this.options.logPosition);
          alertify.closeLogOnClick(this.options.closeLogOnClick);
        }
      },
      _wrapSize: function(size) {
        if (size && $.isArray(size)) {
          if ($.isNumeric(size[0])) {
            size[0] = size[0] + 'px';
          }
          if ($.isNumeric(size[1])) {
            size[1] = size[1] + 'px';
          }
        } else {
          size = ['50%', '50%'];
        }
        return size;
      },
      set: function(options) {
        this.options = $.extend({}, this.options, options);
        return this.init();
      },
      alert: function(msg, callback) {
        var options, root;
        root = this;
        options = $.extend({}, root.options, {
          btn: root.options.btn[0]
        });
        return layer.alert(msg, options, callback);
      },
      success: function(msg, callback) {
        var options, root;
        root = this;
        if (!root.options.useAlertify) {
          options = $.extend({}, root.options, {
            icon: 1,
            btn: root.options.btn[0]
          });
          return layer.alert(msg, options, callback);
        } else {
          return alertify.success(msg);
        }
      },
      info: function(msg, callback) {
        var options, root;
        root = this;
        if (!root.options.useAlertify) {
          options = $.extend({}, root.options, {
            icon: 0,
            btn: root.options.btn[0]
          });
          return layer.alert(msg, options, callback);
        } else {
          return alertify.log(msg);
        }
      },
      error: function(msg, callback) {
        var options, root;
        root = this;
        if (!root.options.useAlertify) {
          options = $.extend({}, root.options, {
            icon: 2,
            btn: root.options.btn[0]
          });
          return layer.alert(msg, options, callback);
        } else {
          return alertify.error(msg);
        }
      },
      confirm: function(msg, fnYes, fnCancel) {
        var options, root;
        root = this;
        options = $.extend({}, root.options, {
          icon: 3
        });
        return layer.confirm(msg, options, function(index) {
          if (fnYes) {
            fnYes(index);
          }
          return layer.close(index);
        }, function(index) {
          if (fnCancel) {
            return fnCancel(index);
          }
        });
      },
      prompt: function(title, fnYes, formType) {
        var options, root;
        root = this;
        options = $.extend({}, root.options, {
          title: title,
          formType: formType || 1
        });
        return layer.prompt(options, fnYes);
      },
      tip: function(msg, selector, options) {
        return layer.tips(msg, selector, $.extend({}, this.options, {
          shade: false,
          btn: null,
          closeBtn: 0,
          time: this.options.tipsTime
        }));
      },
      show: function(selector, title, size) {
        var options, root;
        root = this;
        if (!size || !$.isArray(size)) {
          size = ['50%', '50%'];
        }
        options = $.extend({}, root.options, {
          type: 1,
          btn: null,
          area: root._wrapSize(size),
          content: $(selector)
        });
        return layer.open(options);
      },
      iframe: function(url, title, size) {
        var options, root;
        root = this;
        if (!size || !$.isArray(size)) {
          size = ['50%', '50%'];
        }
        options = $.extend({}, root.options, {
          type: 2,
          btn: null,
          area: root._wrapSize(size),
          content: url
        });
        return layer.open(options);
      },
      loading: function(selector, options) {
        var html, root;
        root = this;
        if (selector) {
          options = $.extend({}, {
            text: 'Loading...'
          }, options);
          html = $('<div class="bn-dialog-loading"><i class="icon fa fa-spin fa-spinner"></i><span class="text">' + options.text + '</span></div>');
          $(selector).each(function() {
            var h;
            if ($(this).find('.bn-dialog-loading').length > 0) {
              return $(this).find('.bn-dialog-loading').show();
            } else {
              h = html.clone();
              $(this).css('position', 'relative');
              h.width($(this).outerWidth());
              h.height($(this).outerHeight());
              h.css('padding-top', h.height() / 2 - 10);
              return $(this).append(h);
            }
          });
        } else {
          options = $.extend({}, root.options, {
            btn: null,
            shade: root.options.loadingShade
          });
          layer.load(root.options.loadingIcon, options);
        }
      },
      loaded: function(selector) {
        if (selector) {
          $(selector).each(function() {
            return $(this).find('.bn-dialog-loading').remove();
          });
        } else {
          layer.closeAll("loading");
        }
      }
    };
    return window.dialog = new Dialog();
  })(window);

}).call(this);
