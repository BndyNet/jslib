// Generated by IcedCoffeeScript 108.0.11
(function() {
  app.directive("bnPager", function() {
    return {
      restrict: "EA",
      template: '<div class="bn-pager" ng-show="model.RecordCount > 0">\n    <div class="summary" ng-show="showSummary">\n        <span ng-bind="(model.CurrentPage - 1) * model.PageSize + 1"></span> \n        - <span ng-bind="model.CurrentPage * model.PageSize > model.RecordCount ? model.RecordCount : model.CurrentPage * model.PageSize"></span> \n        / <span ng-bind="model.RecordCount"></span>\n    </div>\n    <nav aria-label="Page navigation">\n      <ul class="pagination" ng-show="model.PageCount > 1">\n        <li ng-class="{disabled: model.CurrentPage == 1}">\n          <a href="#" aria-label="Previous" ng-click="page(model.CurrentPage-1)">\n            <span aria-hidden="true">&laquo;</span>\n          </a>\n        </li>\n        <li ng-repeat="p in model.DisplayPageNumbers track by $index" ng-class="{active: model.CurrentPage == p, disabled: p < 0}">\n          <a href="#" ng-show="p > 0" ng-click="page(p)"><span ng-bind="p"></span></a>\n          <a href="#" ng-show="p < 0">...</a>\n        </li>\n        <li ng-class="{disabled: model.CurrentPage == model.PageCount}">\n          <a href="#" aria-label="Next" ng-click="page(model.CurrentPage+1)">\n            <span aria-hidden="true">&raquo;</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n</div>',
      replace: true,
      scope: {
        model: "=ngModel",
        onPage: "=onPage"
      },
      link: function(scope, ele, attrs) {
        scope.showSummary = typeof attrs["showSummary"] !== "undefined" ? attrs["showSummary"] === "true" : true;
        if (typeof scope.model.PageCount === "undefined") {
          scope.model.PageCount = Math.ceil(scope.model.RecordCount / scope.model.PageSize);
        }
        scope.computePageNumbers = function() {
          var p, _i, _j, _k, _l, _len, _len1, _m, _n, _o, _p, _ref, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _results, _results1, _results2, _results3;
          if (scope.needComputePageNumber || typeof scope.model.DisplayPageNumbers === "undefined") {
            scope.model.DisplayPageNumbers = [];
            scope.needComputePageNumber = true;
            if (scope.model.PageCount <= 10) {
              _results = [];
              for (p = _i = 1, _ref = scope.model.PageCount; 1 <= _ref ? _i <= _ref : _i >= _ref; p = 1 <= _ref ? ++_i : --_i) {
                _results.push(scope.model.DisplayPageNumbers.push(p));
              }
              return _results;
            } else {
              if (scope.model.CurrentPage <= 5) {
                for (p = _j = 1; _j <= 7; p = ++_j) {
                  scope.model.DisplayPageNumbers.push(p);
                }
                scope.model.DisplayPageNumbers.push(-1);
                _results1 = [];
                for (p = _k = _ref1 = scope.model.PageCount - 1, _ref2 = scope.model.PageCount; _ref1 <= _ref2 ? _k <= _ref2 : _k >= _ref2; p = _ref1 <= _ref2 ? ++_k : --_k) {
                  _results1.push(scope.model.DisplayPageNumbers.push(p));
                }
                return _results1;
              } else if (scope.model.CurrentPage > scope.model.PageCount - 5) {
                _ref3 = [1, 2];
                for (_l = 0, _len = _ref3.length; _l < _len; _l++) {
                  p = _ref3[_l];
                  scope.model.DisplayPageNumbers.push(p);
                }
                scope.model.DisplayPageNumbers.push(-1);
                _results2 = [];
                for (p = _m = _ref4 = scope.model.PageCount - 6, _ref5 = scope.model.PageCount; _ref4 <= _ref5 ? _m <= _ref5 : _m >= _ref5; p = _ref4 <= _ref5 ? ++_m : --_m) {
                  _results2.push(scope.model.DisplayPageNumbers.push(p));
                }
                return _results2;
              } else {
                _ref6 = [1, 2];
                for (_n = 0, _len1 = _ref6.length; _n < _len1; _n++) {
                  p = _ref6[_n];
                  scope.model.DisplayPageNumbers.push(p);
                }
                scope.model.DisplayPageNumbers.push(-1);
                for (p = _o = _ref7 = scope.model.CurrentPage - 2, _ref8 = scope.model.CurrentPage + 2; _ref7 <= _ref8 ? _o <= _ref8 : _o >= _ref8; p = _ref7 <= _ref8 ? ++_o : --_o) {
                  scope.model.DisplayPageNumbers.push(p);
                }
                scope.model.DisplayPageNumbers.push(-1);
                _results3 = [];
                for (p = _p = _ref9 = scope.model.PageCount - 1, _ref10 = scope.model.PageCount; _ref9 <= _ref10 ? _p <= _ref10 : _p >= _ref10; p = _ref9 <= _ref10 ? ++_p : --_p) {
                  _results3.push(scope.model.DisplayPageNumbers.push(p));
                }
                return _results3;
              }
            }
          }
        };
        scope.page = function(p) {
          if (p <= 0) {
            p = 1;
          }
          console.debug(scope.model.PageCount);
          if (p > scope.model.PageCount) {
            p = scope.model.PageCount;
          }
          if (scope.model.CurrentPage !== p) {
            scope.onPage(p);
            scope.model.CurrentPage = p;
            return scope.computePageNumbers();
          }
        };
        scope.$on("onModelChanged", function() {
          return scope.computePageNumbers();
        });
        scope.computePageNumbers();
      }
    };
  });

}).call(this);
